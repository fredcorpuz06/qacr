demo()
install.packages("readOGR")
install.packages("readOGR")
install.packages("rgdal")
spain1= readOGR(dsn = "~/Downloads/NUTS_BN_01M_2013_3857_LEVL_1.shp",
layer="NUTS_BN_01M_2013_3857_LEVL_1", stringsAsFactors=F)
library(rgdal)
spain1= readOGR(dsn = "~/Downloads/NUTS_BN_01M_2013_3857_LEVL_1.shp",
layer="NUTS_BN_01M_2013_3857_LEVL_1", stringsAsFactors=F)
spain11 <- fortify(spain1, region="GEO_ID")
spain2= readOGR(dsn = "~/Downloads/NUTS_RG_01M_2013_3857_LEVL_1.shp",
layer="NUTS_RG_01M_2013_3857_LEVL_1", stringsAsFactors=F)
plot(st_geometry(spain2))
library(sf)
plot(st_geometry(spain2))
plot(spain2)
summary(spain2)
install.packages(c("dplyr", "ggmap", "ggplot2", "ggrepel", "tidyr"))
library(tidyr)
library(dplyr)
library(ggmap)
library(ggplot2)
library(ggrepel)
install.packages('carat')
install.packages('caret')
install.packages('VIM')
install.packages('Amelia')
install.packages('forecastHybrid')
4+6
library(caret)
library(dplyr)
setwd("~/Documents/R/QAC 356")
getwd()
setwd("~/Documents/R/QAC 356/Time Use")
setwd("~/Documents/R")
# Prepare Data ------------------------------------------------------------
data(mpg, package = "ggplot2")
mpg$class[c(1,4,6)] <- NA  # add some missing values
# Code Body ---------------------------------------------------------------
df_freq_tables<-function(data, vars=names(data), na.rm=T){
if(!is.data.frame(data)){
stop("The data source provided is not a data frame")
}
if(!is.character(vars)){
stop("This function only accepts character vectors for the vars input")
}
if(all(vars %in% names(data))==F){
stop("The one of the inputs for the vars variable is not a category featured the data frame ")
}
l<-c()
na<-ifelse(na.rm==F, 'ifany', 'no')
for (n in vars){
count<-as.numeric(table(data[[n]], useNA=na))
value<-names(table(data[[n]], useNA=na))
proportion<-round(count/sum(count),2)
t<-list(data.frame(value, count, proportion))
l<-c(l,t)
}
attr(l, 'names')<-vars
return(l)
}
# Test --------------------------------------------------------------------
df_freq_tables(mpg, c("year", "fl", "class"), na.rm = F)
# call a data source that is not a data frame
df_freq_tables(Titanic, c("Sex", "Class"), na.rm = FALSE)
# call with a numeric vector
df_freq_tables(mpg, c(1, 3, 5), na.rm = FALSE)
# if vars omitted, use all variables
df_freq_tables(mpg)
#Var names error
df_freq_tables(mpg, c("year", "fl", "bacon", 1), na.rm = F)
# function returns a list of data frames
x <- df_freq_tables(mpg, c("model", "year"))
# function returns a list of data frames
x <- df_freq_tables(mpg, c("model", "year"))
class(x)
lapply(x, class)
# Function ---------------------------------------------------------------
df_freq_tables<-function(data, vars=names(data), na.rm=T){
if(!is.data.frame(data)){
stop("The data source provided is not a data frame")#Prints error message if data is not a data frame
}
if(!is.character(vars)){
stop("This function only accepts character vectors for the vars input")#Prints error message if vars is not a character vector
}
if(all(vars %in% names(data))==F){
stop("The one of the inputs for the vars variable is not a category featured the data frame")#Prints error message if vars is not the quoted names of the variables in the data frame
}
l<-c()
na<-ifelse(na.rm==F, 'ifany', 'no')
for (n in vars){
count<-as.numeric(table(data[[n]], useNA=na))
value<-names(table(data[[n]], useNA=na))
proportion<-round(count/sum(count),2)
t<-list(data.frame(value, count, proportion))
l<-c(l,t)
}
attr(l, 'names')<-vars
return(l)
}
load("~/Documents/R/QAC 356/onewayAnova/data/cars.rda")
setwd("~/Documents/R/QAC 356/qacr")
load("/Users/kaitlynthomasfranz/Documents/R/QAC 356/qacr/data/montgomery_crashes.RData")
crashes<-crashes3
View(crashes3)
setwd("~/Documents/R/QAC 356/qacr")
