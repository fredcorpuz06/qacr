repeats <- repeats+1
}
return repeats;
}
create_class <- function(size , simulations){
repeats <- 0
for i in seq_along(simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats <- repeats+1
}
for i in seq_along(simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats <- repeats+1
}
create_class <- function(size , simulations){
}
create_class <- function(size , simulations){
repeats <- 0
for i in seq_along(simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats <- repeats+1
}
create_class <- function(size , simulations){
repeats <- 0
for i in seq_along(simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
create_class <- function(size , simulations){
repeats <- 0
for i in 1:simulations{
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
create_class(10,10)
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return repeats
}
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return repeats
}
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return repeats
}
create_class(10,10)
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return repeats
}
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return(repeats)
}
create_class(10,10)
create_class(10,1000)
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return(repeats/simulations)
}
create_class(10,1000)
create_class(10,100000)
distribution <- function(max_class){
n <- 1:max_class
lapply(n, create_class, 1000)
}
distribution(100)
distribution <- function(max_class){
n <- 1:max_class
as.data.frame(lapply(n, create_class, 1000))
}
distribution(100)
as.data.frame(vapply(n, create_class, 1000))
distribution <- function(max_class){
n <- 1:max_class
as.data.frame(vapply(n, create_class, 1000))
}
distribution(100)
distribution <- function(max_class){
n <- vector(1:max_class)
as.data.frame(vapply(n, create_class, 1000))
}
distribution(100)
class(1:19)
str(1:10)
distribution <- function(max_class){
n <- as.data.frame(1:max_class)
lapply(n, create_class, 1000)
}
distribution(100)
distribution(100,100)
distribution <- function(max_class, simulations){
result <- vector(length = max_class)
for i in seq_along(max_class){
result[i] <- create_class(i, simulations)
}
result <- c(1:max_class, result)
}
distribution <- function(max_class, simulations){
result <- vector(length = max_class)
for i in seq_along(max_class){
result[i] <- create_class(i, simulations)
}
result
}
r = vector(length = 19)
r
mtcars
mtcars[1]
mtcars[,1]
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
for i in seq_along(max_class){
result[i,1] <- create_class(i, simulations)
}
result
}
mtcars[1,]
mtcars[,1]
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
result[,1]
for i in seq_along(max_class){
result[i,2] <- create_class(i, simulations)
}
result
}
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
result[,1]
for i in seq_along(max_class){
result[i,2] <- create_class(i, simulations)
}
result
}
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
result[,1]
for i in seq_along(max_class){
result[i,2] <- create_class(i, simulations)
}
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
result[,1]
for i in seq_along(max_class){
result[i,2] <- create_class(i, simulations)
}
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
result[,1]
for i in seq_along(max_class){
result[i,2] <- create_class(i, simulations)
}
repeats <- 0
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
result[,1]
for i in seq_along(max_class){
result[i,2] <- create_class(i, simulations)
}
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
vapply(1:max_class, create_class)
}
distribution(100,100)
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
vapply(1:max_class, create_class, simulations = simulations)
}
distribution(100,100)
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
lapply(1:max_class, create_class, simulations = simulations)
}
distribution(100,100)
class(distribution(100,100))
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
a <- lapply(1:max_class, create_class, simulations = simulations)
b <- c(1:max_class, a)
}
class(distribution(100,100))
(distribution(100,100))
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
a <- lapply(1:max_class, create_class, simulations = simulations)
df <- data.frame(1:max_class, a)
}
(distribution(100,100))
1:10
as.data.frame(1:10)
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
b <- as.data.frame(1:max_class)
a <- lapply(1:max_class, create_class, simulations = simulations)
df <- data.frame(b,a)
}
(distribution(100,100))
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
b <- as.data.frame(1:max_class)
a <- lapply(1:max_class, create_class, simulations = simulations)
df <- data.frame(b,a)
}
(distribution(100,100))
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
b <- as.data.frame(1:max_class)
a <- lapply(1:max_class, create_class, simulations = simulations)
a
}
(distribution(100,100))
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return(as.data.frame(repeats/simulations))
}
(distribution(100,100))
install.packages(c("microbenchmark", "profvis"))
data <- as.data.frame(
matrix(rnorm(8e5 * 150, mean = 5), ncol = 150)
)
center_cols <- function(d) {
# Get vector of column means
means <- apply(d, 2, mean)
# Subtract mean from each column
for (i in seq_along(means)) {
d[, i] <- d[, i] - means[i]
}
return(d)
}
# Run
result <- center_cols(data)
# With timing
system.time({
# Run, but don't print output
result <- center_cols(data)
})
# Profiling with profvis
# install.packages("profvis")
library(profvis)
profvis({
center_cols <- function(d) {
# Get vector of column means
means <- apply(d, 2, mean)
# Subtract mean from each column
for (i in seq_along(means)) {
d[, i] <- d[, i] - means[i]
}
return(d)
}
# Run
result <- center_cols(data)
})
install.packages(c("doParallel", "future.apply"))
hw7_markets <- read.delim("~/Desktop/College/Wesleyan/Fall_2019/How_to_Talk_to_Machines/Homework/Homework7/hw7_markets.tsv", header=FALSE)
View(hw7_markets)
library(readxl)
TableLibrary <- read_excel("Homework/Homework3/TableLibrary.xlsx")
View(TableLibrary)
library(readxl)
enrollment <- read_excel("Homework/Homework3/TableLibrary.xlsx")
devtools::install_github("rkabacoff/anovaReport")
library(anovaReport)
?anova_report
result <- aov(cty~class, data = mpg)
mpg
data(mpg, package = "ggplot2")
result <- aov(cty~class, data = mpg)
result
summary(result)
anova_report(mpg, class, cty)
data(mpg, package = "ggplot2")
mpg$class <- factor(mpg$class)
mpg$class <- reorder(mpg$class, mpg$hwy, mean, na.rm=TRUE)
a <- aov(hwy~class, data=mpg)
tHSD <- TukeyHSD(a, ordered = FALSE, conf.level = 0.95)
a
thsd
tHSD
Tukey.levels <- tHSD[[1]][,4]
View(tHSD)
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
library(ggplot2)
library(multcompView)
library(RColorBrewer)
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
install.packages("multcompView")
library(multcompView)
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
library(readxl)
enrollment <- read_excel("Homework/Homework3/TableLibrary.xlsx")
enrollment$`state or jurisdiction` <- factor(enrollment$`state or jurisdiction`)
saveRDS(enrollment, "enrollment.rda")
setwd("qacr")
setwd(qacr)
getwd()
Export <- read.csv("~/Desktop/College/Wesleyan/Fall_2019/AdvancedR/Homework/Homework3/Export.csv", stringsAsFactors=FALSE)
View(Export)
Farmers_Markets <- Export["FMID", "MarketName", "street", "city", "County", "State", "zip", "x", "y"]
Export["FMID", "MarketNa"]
Export["FMID", "MarketName"]
Export[c("FMID", "MarketName")]
Farmers_Markets <- Export[c("FMID", "MarketName", "street", "city", "County", "State", "zip", "x", "y")]
Farmers_Markets$State <- factor(Farmers_Markets$State)
saveRDS(Farmers_Markets, "Farmers_Markets.rds")
library(usethis)
usethis::use_vignette("Tab")
library(qacr)
library(usethis)
usethis::use_vignette("Tab")
library(qacr)
data(Farmers_Markets, package = "qacr")
library(qacr)
data(venues, package = "qacr")
data(Farmers_Markets, package = "qacr")
Farmers_Markets <- Export[c("FMID", "MarketName", "street", "city", "County", "State", "zip", "x", "y")]
Farmers_Markets$State <- factor(Farmers_Markets$State)
saveRDS(Farmers_Markets, "Farmers_Markets.rda")
Farmers_Markets <- Export[c("FMID", "MarketName", "street", "city", "County", "State", "zip", "x", "y")]
Farmers_Markets$State <- factor(Farmers_Markets$State)
save(Farmers_Markets, "Farmers_Markets.rds")
Farmers_Markets <- Export[c("FMID", "MarketName", "street", "city", "County", "State", "zip", "x", "y")]
Farmers_Markets$State <- factor(Farmers_Markets$State)
save(Farmers_Markets, "Farmers_Markets.rda")
save(Farmers_Markets, file = "Farmers_Markets.rda")
library(qacr)
data("Farmers_Markets")
Farmers_Markets
usethis::use_vignette()
usethis::use_vignette("Tab")
data("Farmers_Markets", package = "qacr")
fm <- data("Farmers_Markets", package = "qacr")
library(qacr)
fm <- data("Farmers_Markets", package = "qacr")
tab(data = fm, sort = TRUE, maxcat = 10, na.rm = FALSE, total = TRUE, digits = 3)
library(qacr)
fm <- data("Farmers_Markets", package = "qacr")
tab(data = fm, x = State, sort = TRUE, maxcat = 10, na.rm = FALSE, total = TRUE, digits = 3)
library(qacr)
fm <- data("Farmers_Markets", package = "qacr")
tab(data = fm, x = State, sort = TRUE, na.rm = FALSE, total = TRUE, digits = 3)
library(qacr)
fm <- data("Farmers_Markets", package = "qacr")
tab(data = fm, x = State, sort = TRUE, na.rm = FALSE, digits = 3)
View(Farmers_Markets)
tab(fm)
tab(fm, State)
tab(fm, "State")
tab(venues, state)
tab(Farmers_Markets, city)
tab(Farmers_Markets, state
)
f <- data(Farmers_Markets, "qacr")
f <- data(Farmers_Markets, package = "qacr")
f
View(f)
tab(Farmers_Markets, State)
data("Farmers_Markets", qacr)
data("Farmers_Markets", package = "qacr")
force(Farmers_Markets)
library(qacr)
fm <- data("Farmers_Markets", package = "qacr")
tab(data = fm, x = State, sort = TRUE, na.rm = FALSE, digits = 3)
library(qacr)
fm <- data("venues", package = "qacr")
tab(data = fm, x = State, sort = TRUE, na.rm = FALSE, digits = 3)
fm <- data(venues, package = "qacr")
library(qacr)
fm <- data(venues, package = "qacr")
tab(data = fm, x = State, sort = TRUE, na.rm = FALSE, digits = 3)
library(qacr)
fm <- data(venues, package = "qacr")
tab(data = fm, x = state, sort = TRUE, na.rm = FALSE, digits = 3)
library(qacr)
fm <- data("venues", package = "qacr")
tab(data = fm, x = state, sort = TRUE, na.rm = FALSE, digits = 3)
library(usethis)
use_data("Farmers_Markets")
use_data(Farmers_Markets)
use_data(Farmers_Markets, overwrite = T)
library(qacr)
data("Farmers_Markets", package = "qacr")
Farmers_Markets
library(qacr)
fm <- data("Farmers_Markets", package = "qacr")
tab(data = fm, x = state, sort = TRUE, na.rm = FALSE, digits = 3)
fm
library(qacr)
fm <- data(Farmers_Markets, package = "qacr")
tab(data = fm, x = state)
fm
fm <- data("Farmers_Markets", package = "qacr")
fm
data(Farmers_Markets, package = "qacr")
force(Farmers_Markets)
data("venues")
force(venues)
force("venues")
force(data("Farmers_Markets", package = "qacr"))
force(Farmers_Markets)
data("Farmers_Markets")
force(Farmers_Markets)
data("border")
data(mpg)
data("mpg")
data(mtcars)
qacr::Farmers_Markets
Farmers_Markets
library(qacr)
tab(Farmers_Markets, State)
library(qacr)
tab(Farmers_Markets, State, maxcat = 10)
library(qacr)
tab(Farmers_Markets, State, maxcat = 10, total = TRUE)
library(qacr)
tab(Farmers_Markets, State)
library(qacr)
tab(Farmers_Markets, State, maxcat = 10)
library(qacr)
tab(Farmers_Markets, State, maxcat = 10, total = TRUE)
tab(Farmers_Markets, State, minp= 4)
tab(Farmers_Markets, State, minp= .04)
"a"<"c"
"Mr"<"Mrs"
