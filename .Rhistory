props = props[1:maxcat]
props[length(props) + 1] = prop_other
ns = ns[1:maxcat]
ns[length(ns) + 1] = n_other
}
if (!is.null(minp)) {
if (minp > 1 & minp < 100){
minp <- minp/100
warning("minp argument should be less than one. Converting to proportion")
}
if (minp > 100){
stop("minp should be less than one. Argument is too large")
}
t_df = data.frame(level = cats, n = ns, percent = props)
n_other = 0
prop_other = 0
times = sum(t_df[["percent"]] > minp)
df = data.frame(level = rep(NA, times = times), n = rep(NA, times = times), percent = rep(NA, times = times))
place = 1
for (i in 1:nrow(t_df)) {
x = t_df$percent[i]
should_keep = ifelse(is.na(t_df$level[i]), TRUE, FALSE)
if ( x < minp & !should_keep){
n_other = n_other + t_df[["n"]][i]
prop_other = prop_other + t_df[["percent"]][i]
} else {
df[place, ] = t_df[i, ]
place = place + 1
}
cats = df$level
props = df$percent
ns = df$n
levels(cats) = c(levels(cats), "Other")
cats[length(cats) + 1] = "Other"
props[length(props) + 1] = prop_other
ns[length(ns) + 1] = n_other
}
if (!na.rm){
levels(cats) = c(levels(cats), NA)
cats[length(cats) + 1] = NA
props[length(props) + 1] = prop_na
ns[length(ns) + 1] = na_n
}
if (total) {
levels(cats) = c(levels(cats), "Total")
cats[length(cats) + 1] = "Total"
props[length(props) + 1] = sum(props)
ns[length(ns) + 1] = sum(ns)
}
df <- data.frame(level = cats, n = ns, percent = round(props, digits = digits))
class(df) <- c("tab", "data.frame")
return(df)
}
df <-  tab(diamonds, clarity, sort=TRUE, na.rm = FALSE)
df
c <- tab(d, state, total = TRUE, na.rm = TRUE)
c
stadiums <- read.csv("Major_Sport_Venues.csv")
stadiums <- read.csv("Homework/Homework2/Major_Sport_Venues.csv")
names(stadiums) <- tolower(names(stadiums))
stadiums <- stadiums[c("venueid", "name", "city", "state", "zip", "status", "county", "naics_desc")]
stadiums %>%
mutate(name = as.character(name), city = as.character(city), county = as.character(county)) -> stadiums
stadiums %>%
mutate(name = as.character(name), city = as.character(tolower(city)), county = as.character(tolower(county))) -> stadiums
tab(stadiums, naics_desc)
tab(stadiums, naics_desc, na.rm = TRUE)
tab(stadiums, naics_desc, na.rm = TRUE, sort = TRUE)
tab(stadiums, naics_desc, na.rm = TRUE, sort = TRUE, total = TRUE)
df <-  tab(diamonds, clarity, sort=TRUE, na.rm = FALSE)
df
tab(stadiums, city, na.rm = TRUE, sort = TRUE, total = TRUE)
tab(stadiums, city, na.rm = TRUE, sort = TRUE, total = TRUE, maxcat = 6)
tab(stadiums, city, na.rm = FALSE, sort = TRUE, total = TRUE, maxcat = 6)
df <-  tab(diamonds, clarity, sort=TRUE, na.rm = FALSE)
df
tab(stadiums, city, na.rm = FALSE, sort = TRUE, total = TRUE, maxcat = 6)
tab(stadiums, city, na.rm =  TRUE, sort = TRUE, total = TRUE, maxcat = 6)
print.tab <- function(x, ...){
if(!inherits(x, "tab")) stop("Must be class 'tab'")
df = x[[1]]
df$percent = paste(as.character(df$percent*100), "%", sep = "")
print.data.frame(df)
}
df
help(sample)
x <- sample(1:4)
x
x <- sample(1:365)
x
x <- sample(1:365, 10)
x
x <- ?sample(1:365, 10, replace = TRUE)
x
x <- sample(1:365, 10, replace = TRUE)
x
rnd
random
unique(x)
class(unique(x))
a <- sample(1:100, 1)
a
create_class(10,10)
create_class <- function(size , simulations){
repeats <- 0
for i in seq_along(simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats <- repeats+1
}
return repeats
}
create_class(10,10)
create_class <- function(size , simulations){
repeats <- 0
for i in seq_along(simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats <- repeats+1
}
return repeats;
}
??length
create_class <- function(size , simulations){
repeats <- 0
for i in seq_along(simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats <- repeats+1
}
return repeats;
}
create_class <- function(size , simulations){
repeats <- 0
for i in seq_along(simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats <- repeats+1
}
for i in seq_along(simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats <- repeats+1
}
create_class <- function(size , simulations){
}
create_class <- function(size , simulations){
repeats <- 0
for i in seq_along(simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats <- repeats+1
}
create_class <- function(size , simulations){
repeats <- 0
for i in seq_along(simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
create_class <- function(size , simulations){
repeats <- 0
for i in 1:simulations{
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
create_class(10,10)
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return repeats
}
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return repeats
}
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return repeats
}
create_class(10,10)
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return repeats
}
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return(repeats)
}
create_class(10,10)
create_class(10,1000)
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return(repeats/simulations)
}
create_class(10,1000)
create_class(10,100000)
distribution <- function(max_class){
n <- 1:max_class
lapply(n, create_class, 1000)
}
distribution(100)
distribution <- function(max_class){
n <- 1:max_class
as.data.frame(lapply(n, create_class, 1000))
}
distribution(100)
as.data.frame(vapply(n, create_class, 1000))
distribution <- function(max_class){
n <- 1:max_class
as.data.frame(vapply(n, create_class, 1000))
}
distribution(100)
distribution <- function(max_class){
n <- vector(1:max_class)
as.data.frame(vapply(n, create_class, 1000))
}
distribution(100)
class(1:19)
str(1:10)
distribution <- function(max_class){
n <- as.data.frame(1:max_class)
lapply(n, create_class, 1000)
}
distribution(100)
distribution(100,100)
distribution <- function(max_class, simulations){
result <- vector(length = max_class)
for i in seq_along(max_class){
result[i] <- create_class(i, simulations)
}
result <- c(1:max_class, result)
}
distribution <- function(max_class, simulations){
result <- vector(length = max_class)
for i in seq_along(max_class){
result[i] <- create_class(i, simulations)
}
result
}
r = vector(length = 19)
r
mtcars
mtcars[1]
mtcars[,1]
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
for i in seq_along(max_class){
result[i,1] <- create_class(i, simulations)
}
result
}
mtcars[1,]
mtcars[,1]
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
result[,1]
for i in seq_along(max_class){
result[i,2] <- create_class(i, simulations)
}
result
}
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
result[,1]
for i in seq_along(max_class){
result[i,2] <- create_class(i, simulations)
}
result
}
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
result[,1]
for i in seq_along(max_class){
result[i,2] <- create_class(i, simulations)
}
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
result[,1]
for i in seq_along(max_class){
result[i,2] <- create_class(i, simulations)
}
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
result[,1]
for i in seq_along(max_class){
result[i,2] <- create_class(i, simulations)
}
repeats <- 0
distribution <- function(max_class, simulations){
result <- vector(length = max_class, dim = 2)
result[,1]
for i in seq_along(max_class){
result[i,2] <- create_class(i, simulations)
}
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
vapply(1:max_class, create_class)
}
distribution(100,100)
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
vapply(1:max_class, create_class, simulations = simulations)
}
distribution(100,100)
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
lapply(1:max_class, create_class, simulations = simulations)
}
distribution(100,100)
class(distribution(100,100))
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
a <- lapply(1:max_class, create_class, simulations = simulations)
b <- c(1:max_class, a)
}
class(distribution(100,100))
(distribution(100,100))
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
a <- lapply(1:max_class, create_class, simulations = simulations)
df <- data.frame(1:max_class, a)
}
(distribution(100,100))
1:10
as.data.frame(1:10)
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
b <- as.data.frame(1:max_class)
a <- lapply(1:max_class, create_class, simulations = simulations)
df <- data.frame(b,a)
}
(distribution(100,100))
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
b <- as.data.frame(1:max_class)
a <- lapply(1:max_class, create_class, simulations = simulations)
df <- data.frame(b,a)
}
(distribution(100,100))
distribution <- function(max_class, simulations){
# result <- vector(length = max_class, dim = 2)
# result[,1]
# for i in seq_along(max_class){
#   result[i,2] <- create_class(i, simulations)
# }
b <- as.data.frame(1:max_class)
a <- lapply(1:max_class, create_class, simulations = simulations)
a
}
(distribution(100,100))
create_class <- function(size , simulations){
repeats <- 0
for (i in 1:simulations){
class <- sample(1:365, size, replace = TRUE)
if (length(class) != length(unique(class))){
repeats = repeats+1
}
return(as.data.frame(repeats/simulations))
}
(distribution(100,100))
install.packages(c("microbenchmark", "profvis"))
data <- as.data.frame(
matrix(rnorm(8e5 * 150, mean = 5), ncol = 150)
)
center_cols <- function(d) {
# Get vector of column means
means <- apply(d, 2, mean)
# Subtract mean from each column
for (i in seq_along(means)) {
d[, i] <- d[, i] - means[i]
}
return(d)
}
# Run
result <- center_cols(data)
# With timing
system.time({
# Run, but don't print output
result <- center_cols(data)
})
# Profiling with profvis
# install.packages("profvis")
library(profvis)
profvis({
center_cols <- function(d) {
# Get vector of column means
means <- apply(d, 2, mean)
# Subtract mean from each column
for (i in seq_along(means)) {
d[, i] <- d[, i] - means[i]
}
return(d)
}
# Run
result <- center_cols(data)
})
install.packages(c("doParallel", "future.apply"))
hw7_markets <- read.delim("~/Desktop/College/Wesleyan/Fall_2019/How_to_Talk_to_Machines/Homework/Homework7/hw7_markets.tsv", header=FALSE)
View(hw7_markets)
library(readxl)
TableLibrary <- read_excel("Homework/Homework3/TableLibrary.xlsx")
View(TableLibrary)
library(readxl)
enrollment <- read_excel("Homework/Homework3/TableLibrary.xlsx")
devtools::install_github("rkabacoff/anovaReport")
library(anovaReport)
?anova_report
result <- aov(cty~class, data = mpg)
mpg
data(mpg, package = "ggplot2")
result <- aov(cty~class, data = mpg)
result
summary(result)
anova_report(mpg, class, cty)
data(mpg, package = "ggplot2")
mpg$class <- factor(mpg$class)
mpg$class <- reorder(mpg$class, mpg$hwy, mean, na.rm=TRUE)
a <- aov(hwy~class, data=mpg)
tHSD <- TukeyHSD(a, ordered = FALSE, conf.level = 0.95)
a
thsd
tHSD
Tukey.levels <- tHSD[[1]][,4]
View(tHSD)
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
library(ggplot2)
library(multcompView)
library(RColorBrewer)
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
install.packages("multcompView")
library(multcompView)
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
library(readxl)
enrollment <- read_excel("Homework/Homework3/TableLibrary.xlsx")
enrollment$`state or jurisdiction` <- factor(enrollment$`state or jurisdiction`)
saveRDS(enrollment, "enrollment.rda")
setwd("qacr")
setwd(qacr)
getwd()
